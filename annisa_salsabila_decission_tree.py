# -*- coding: utf-8 -*-
"""ANNISA SALSABILA_DECISSION_TREE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s4SF8LjjMPOATfVcErczwi4azL07qw5k

**Install scikit-learn** bagi yang belum instalasi
"""

!pip install scikit-learn==0.23.1

"""Memanggil semua package yang akan digunakan"""

import sys
import numpy as np
import pandas as pd
import sklearn.tree as tree

"""Load data set, dengan cara upload terlebih dahulu ke drive google collab"""

df = pd.read_csv('drug200.csv')
df.head()

"""**Lakukan visualisasi data terlebih dahulu untuk mengeksplorasi data**"""

df['minuman'].value_counts()

"""Membuat histogram beberapa variabel bebas"""

df.info()

import matplotlib.pyplot as plt

"""Bar Chart Jenis Kelamin"""

# Tabulasi data
tabulasi_jk = df['jk'].value_counts().reset_index()
tabulasi_jk.columns = ['Kategori', 'Jumlah']  # Menamai kolom
print(tabulasi_jk)

# Membuat bar chart
plt.figure(figsize=(8, 6))  # Mengatur ukuran gambar
plt.bar(tabulasi_jk['Kategori'], tabulasi_jk['Jumlah'], color='skyblue')  # Membuat bar chart
plt.xlabel('Kategori')  # Label sumbu X
plt.ylabel('Jumlah')  # Label sumbu Y
plt.title('Jenis Kelamin')  # Judul
plt.show()  # Menampilkan grafik

"""Bar Chart Drug"""

# Tabulasi data
tabulasi_minuman = df['minuman'].value_counts().reset_index()
tabulasi_minuman.columns = ['Kategori', 'Jumlah']  # Menamai kolom
print(tabulasi_minuman)

# Membuat bar chart
plt.figure(figsize=(8, 6))  # Mengatur ukuran gambar
plt.bar(tabulasi_minuman['Kategori'], tabulasi_minuman['Jumlah'], color='skyblue')  # Membuat bar chart
plt.xlabel('Kategori')  # Label sumbu X
plt.ylabel('Jumlah')  # Label sumbu Y
plt.title('Minuman Rekomendasi')  # Judul
plt.show()  # Menampilkan grafik

"""**Persiapan Data**

*   Membuat kelompok Feature atau variabel bebas tersendiri
*   Membuat kelompok labels atau variabel terikat tersendiri
"""

df.columns

X = df[['umur', 'jk', 'imt', 'kolestrol', 'kandungan', 'minuman']] .values  #.astype(float)
X[0:5]

y = df['minuman'].values
y[0:5]

"""Data berbentuk huruf tidak dapat di proses sehingga perlu di transformasi berbentuk numerik"""

from sklearn import preprocessing
le_sex = preprocessing.LabelEncoder()
le_sex.fit(['F','M'])
X[:,1] = le_sex.transform(X[:,1])


le_BP = preprocessing.LabelEncoder()
le_BP.fit([ 'LOW', 'NORMAL', 'HIGH'])
X[:,2] = le_BP.transform(X[:,2])


le_Chol = preprocessing.LabelEncoder()
le_Chol.fit([ 'NORMAL', 'HIGH'])
X[:,3] = le_Chol.transform(X[:,3])

X[0:5]

"""**Membagi data menjadi data training dan testing**

proporsi sebesar 30% data testing, dan 70% data training
"""

from sklearn.model_selection import train_test_split
X_train, X_tes, y_train, y_tes = train_test_split(X, y, test_size=0.3, random_state=3)
print ('Train set:', X_train.shape,  y_train.shape)
print ('Test set:', X_tes.shape,  y_tes.shape)

y_tes

"""**Klasifikasi Decision Tree**"""

from sklearn.tree import DecisionTreeClassifier

"""**1. Training atau melatih model**

We will first create an instance of the DecisionTreeClassifier called drugTree.
Inside of the classifier, specify criterion="entropy" so we can see the information gain of each node.
"""

model_dt = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
model_dt.fit(X_train, y_train)

"""**2. Prediksi data testing**"""

predTree = model_dt.predict(X_tes)
predTree[0:5]

print (predTree[0:5])
print (y_tes[0:5])

"""**3. Evaluasi Akurasi Model**

In multilabel classification, accuracy classification score is a function that computes subset accuracy. This function is equal to the jaccard_score function. Essentially, it calculates how closely the actual labels and predicted labels are matched in the test set.
"""

from sklearn import metrics
import matplotlib.pyplot as plt
print("DecisionTrees's Accuracy: ", metrics.accuracy_score(y_tes, predTree))

"""# **Membandingkan menggunakan KNN**"""

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
import matplotlib.pyplot as plt

"""Membuat model KNN dengan k=5"""

model_knn = KNeighborsClassifier(n_neighbors=5)

"""Melatih model dengan data training"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=3)

"""Melakukan prediksi pada data testing"""

pred_knn = model_knn.predict(X_tes)

"""Menampilkan hasil prediksi"""

# KNN Model
k = 5  # Nilai K yang bisa disesuaikan
model_knn = KNeighborsClassifier(n_neighbors=k)
model_knn.fit(X_train, y_train)
pred_knn = model_knn.predict(X_test)
accuracy_knn = metrics.accuracy_score(y_test, pred_knn)

"""Evaluasi akurasi model"""

# Print accuracy results
print(f"KNN Accuracy (k={k}): {accuracy_knn:.10f}")

# Plot comparison
models = ['Decision Tree', f'KNN (k={k})']
accuracies = [accuracy_dt, accuracy_knn]
plt.bar(models, accuracies, color=['skyblue', 'orange'])
plt.xlabel('Model')
plt.ylabel('Accuracy')
plt.title('Comparison of Decision Tree and KNN')
plt.ylim(0, 1)
plt.show()