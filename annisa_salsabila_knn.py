# -*- coding: utf-8 -*-
"""ANNISA SALSABILA_KNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ecoPsePoY7FQVSL-FD8uzy6M-PDn7gbk

**Install scikit-learn** bagi yang belum instalasi
"""

!pip install scikit-learn==0.23.1

"""Memanggil semua package yang akan digunakan"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn import preprocessing
# %matplotlib inline

"""Load data set, dengan cara upload terlebih dahulu ke drive google collab"""

df = pd.read_csv('teleCust1000t.csv')
df.head()

"""**Lakukan visualisasi data terlebih dahulu untuk mengeksplorasi data**

Hitung jumlah setiap kategori,

*  1: Customer sangat tidak loyal
*  2: Cutomer tidak loyal
*  3: Customer loyal
*  4: Customer sangat loyal
"""

df['custcat'].value_counts()

"""Membuat histogram beberapa variabel bebas"""

df.info()

df.hist(column="masa_jabatan",bins=10)

df.hist(column='income', bins=50)

"""**Persiapan Data**

*   Membuat kelompok Feature atau variabel bebas tersendiri
*   Membuat kelompok labels atau variabel terikat tersendiri
"""

df.columns

X = df[['daerah', 'masa_jabatan', 'umur', 'perkawinan', 'alamat', 'income','pendidikan', 'pekerjaan', 'pensiun', 'jk', 'tinggal']] .values  #.astype(float)
X[0:5]

y = df['custcat'].values
y[0:5]

"""**Lakukan Normalisasi Data**"""

X = preprocessing.StandardScaler().fit(X).transform(X.astype(float))
X[0:5]

"""**Membagi data menjadi data training dan testing**

proporsi sebesar 20% data testing, dan 80% data training
"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)
print ('Train set:', X_train.shape,  y_train.shape)
print ('Test set:', X_test.shape,  y_test.shape)

"""**Klasifikasi KNN**"""

from sklearn.neighbors import KNeighborsClassifier

"""**1. Training atau melatih model**

Kita memulai dengan menentukan k=4
"""

k = 4
#Train Model and Predict
model_knn = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)
model_knn

"""**2. Prediksi data testing**"""

yhat = model_knn.predict(X_test)
yhat[0:5]

y_test[0:5]

"""**3. Evaluasi Akurasi Model**

In multilabel classification, accuracy classification score is a function that computes subset accuracy. This function is equal to the jaccard_score function. Essentially, it calculates how closely the actual labels and predicted labels are matched in the test set.
"""

from sklearn import metrics

# Pastikan model KNN sudah dilatih
knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train, y_train)

# Prediksi untuk training dan testing set
y_train_pred = knn_model.predict(X_train)
y_test_pred = knn_model.predict(X_test)

# Hitung akurasi
print("Train set Accuracy: ", metrics.accuracy_score(y_train, y_train_pred))
print("Test set Accuracy: ", metrics.accuracy_score(y_test, y_test_pred))

"""**4. Membandingkan K kemungkinan yang lain**

Import pustaka yang dibutuhkan
"""

from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics
import matplotlib.pyplot as plt

"""Inisialisasi daftar untuk menyimpan hasil akurasi"""

train_acc = []  # Menyimpan akurasi pada data training
test_acc = []   # Menyimpan akurasi pada data testing
max_depth_values = range(1, 21)  # Rentang kedalaman pohon yang akan diuji (1 hingga 20)

"""Looping untuk mencoba berbagai kedalaman DECISSION TREE"""

for k in max_depth_values:
    # Membuat model Decision Tree dengan kedalaman tertentu
    model_dt = DecisionTreeClassifier(max_depth=k, random_state=4)

    # Melatih model dengan data training
    model_dt.fit(X_train, y_train)

    # Memprediksi hasil pada data training dan testing
    y_train_pred = model_dt.predict(X_train)
    y_test_pred = model_dt.predict(X_test)

    # Menghitung akurasi model untuk data training dan testing
    train_acc.append(metrics.accuracy_score(y_train, y_train_pred))
    test_acc.append(metrics.accuracy_score(y_test, y_test_pred))

"""Membuat grafik untuk membandingkan akurasi"""

plt.figure(figsize=(10, 5))
plt.plot(max_depth_values, train_acc, label="Akurasi Training", marker='o')
plt.plot(max_depth_values, test_acc, label="Akurasi Testing", marker='s')
plt.xlabel("Kedalaman Pohon Keputusan (max_depth)")
plt.ylabel("Akurasi")
plt.title("Perbandingan Akurasi Decision Tree dengan Berbagai Kedalaman")
plt.legend()
plt.grid(True)
plt.show()

"""Evaluasi Akurasi Model


"""

# Mencari kedalaman optimal berdasarkan akurasi tertinggi pada data testing
optimal_depth = max_depth_values[test_acc.index(max(test_acc))]

# Membuat model dengan kedalaman optimal
best_model = DecisionTreeClassifier(max_depth=optimal_depth, random_state=4)
best_model.fit(X_train, y_train)

# Memprediksi data testing
y_pred_best = best_model.predict(X_test)

# Menghitung akurasi model terbaik
best_accuracy = metrics.accuracy_score(y_test, y_pred_best)

# Menampilkan output akurasi model Decision Tree
print(f"Decision Tree's Accuracy: {best_accuracy:.10f}")  # Menampilkan hingga 10 desimal

"""Berdasarkan hasil evaluasi, model Decision Tree memiliki akurasi sebesar 42.50% pada data uji. Nilai ini menunjukkan bahwa model belum cukup optimal dalam melakukan klasifikasi."""